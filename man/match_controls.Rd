% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_controls.R
\name{match_controls}
\alias{match_controls}
\title{Exact and inexact matching}
\usage{
match_controls(
  dat_case,
  dat_ctrl,
  match_exact = NULL,
  match_inexact = NULL,
  n_controls = 1L,
  seed = NULL
)
}
\arguments{
\item{dat_case}{A data.frame. Data on cases.}

\item{dat_ctrl}{A data.frame. Data on potential controls. Column names,
order and types must be the same as in \code{dat_case}.}

\item{match_exact}{Character vector. Variables on which to do exact matching.}

\item{match_inexact}{String with inexact matching criterias. See details and
examples.}

\item{n_controls}{Numeric vector of length 1. Number of controls to match to
each case.}

\item{seed}{Numeric vector of length 1 that can be interpreted as an integer.}
}
\value{
data.table
}
\description{
Find matches for cases from a pool of potential controls using exact and/or
inexact matching criterias.
}
\details{
The function works by creating a cross join of cases and a combination of
controls and cases (on any specified exact matching variables), from which
random controls are chosen. Further inexact matching criterias can then be
applied, eg. "var1 < i.var & abs(var2 - i.var2)" where the "i." prefix on
variables denote case values.
}
\examples{
n <- 100
set.seed(1)
dat <- data.frame(
  id = 1:100,
  case = c(rep(1, n/10), rep(0, (n * 9 / 10))),
  bin_var = rbinom(n, 1, 0.5),
  cont_var = rnorm(n, 0, 1)
)
matches <- match_controls(
  dat[dat$case == 1, ],
  dat[dat$case == 0, ],
  match_exact = "bin_var",
  match_inexact = "!i.id == id & abs(cont_var - i.cont_var) < 0.1",
  seed = 2
)
}
